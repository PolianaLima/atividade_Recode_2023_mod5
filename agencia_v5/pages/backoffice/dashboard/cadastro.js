import React, {useEffect, useState} from 'react';
import Head from "next/head";
import {useAuth} from "@/context/authContext";
import {useRouter} from "next/router";
import {useForm} from "react-hook-form";
import {http} from "@/utils/http";
import axios from "axios";
import ButtonFechar from "@/components/ButtonFechar";
import ModalComponent from "@/components/ModalComponent";
import {getTokenVerify} from "@/pages/api/getTokenVerify";

function Cadastro(props) {

    getTokenVerify();


    const [modalIsOpen, setModaIsOpen] = useState(false);
    const [aeroportos, setAeroportos] = useState([]);
    const [empresas, setEmpresas] = useState([]);

    const openModal = () => {
        setModaIsOpen(true);
    }

    const closeModal = () => {
        setModaIsOpen(false);
        router.push('/backoffice/dashboard')
    }

    const {token} = useAuth();
    const router = useRouter();
    const [status, setStatus] = useState([false])
    const [error, setError] = useState([false])

    const {
        register,
        handleSubmit,
        formState: {errors},
        reset
    } = useForm();

    useEffect(() => {
        if (token == null) router.push('/')
    }, [token, router]);


    useEffect(() => {
        http.get(`/aeroportoslista`, {
            headers: {
                "Authorization": `Bearer ${token}`
            }
        })
            .then((response) =>
                setAeroportos(response.data)
            )
            .catch((error) => {
                console.error("Erro ao listar Aeroportos", error)
            })
    }, [token]);

    useEffect(() => {
        http.get(`/empresasaereasLista`, {
            headers: {
                "Authorization": `Bearer ${token}`
            }
        })
            .then((response) =>
                setEmpresas(response.data)
            )
            .catch((error) => {
                console.error("Erro ao listar Aeroportos", error)
            })
    }, [token]);

    const onSubmit = async (data) => {
        try {
            await http.post("/voos", data, {
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            })
                .then(response => {
                    setStatus(true)
                    reset()
                    openModal()
                })
        } catch (error) {
            if (axios.isAxiosError(error) && error.response) {
                console.error('Erro na resposta da API:', error.response.data);
                setError(true)
            } else {
                console.error('Erro ao enviar dados para a API:', error);
                setError(true)
            }
        }
    }


    return (
        <>
            <Head>
                <title>Agencia de Viagems - Cadastro VOO </title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <main className="container">
                <form className="form-control p-5">
                    <ButtonFechar url="/backoffice/dashboard"/>

                    <div className="d-sm-flex justify-content-between">

                        <div className="w-100 me-2">
                            <label className="p-1">Empresa Aerea</label>
                            < select className="form-select mb-3"
                                     defaultValue="0"
                                     {...register("id_empresa",
                                         {validate: (value) => (value !== "0")})}
                            >
                                <option value="0">Selecione uma empresa</option>
                                {empresas.length > 0 ? (
                                    empresas.map(empresa =>
                                        <option key={empresa.id} value={empresa.id}>{empresa.nome}</option>
                                    )

                                ) : ("")}
                            </select>
                            {errors?.empresa?.type === "validate" && (
                                <p className="text-danger fw-bold">Selecione uma opção válida</p>
                            )}
                        </div>

                        <div className="w-100 me-2">
                            <label className="p-1">Aeroporto Partida</label>
                            < select className="form-select mb-3"
                                     defaultValue="0"
                                     {...register("id_aeroporto_partida",
                                         {validate: (value) => (value !== "0")})}
                            >
                                <option value="0">Selecione um aeroporto</option>
                                {aeroportos.length > 0 ? (
                                    aeroportos.map(aeroporto =>
                                        <option key={aeroporto.id} value={aeroporto.id}>{aeroporto.nome}</option>
                                    )

                                ) : ("")}
                            </select>
                            {errors?.aeroporto_partida?.type === "validate" && (
                                <p className="text-danger fw-bold">Selecione uma opção válida</p>
                            )}
                        </div>

                        <div className="w-100 me-2">
                            <label className="p-1">Aeroporto Destino</label>
                            < select className="form-select mb-3"
                                     defaultValue="0"
                                     {...register("id_aeroporto_chegada",
                                         {validate: (value) => (value !== "0")})}
                            >
                                <option value="0">Selecione um aeroporto</option>
                                {aeroportos.length > 0 ? (
                                    aeroportos.map(aeroporto =>
                                        <option key={aeroporto.id} value={aeroporto.id}>{aeroporto.nome}</option>
                                    )

                                ) : ("")}
                            </select>
                            {errors?.id_aeroporto_chegada?.type === "validate" && (
                                <p className="text-danger fw-bold">Selecione uma opção válida</p>
                            )}
                        </div>

                    </div>

                    <div className="d-sm-flex justify-content-between">

                        <div className="w-100 me-2">
                            <label className="p-1">Data Voo</label>
                            <input type="date"
                                   className="form-control"
                                   {...register("data_partida", {required: true})}
                            />
                            {errors?.data_partida?.type === "required" && (
                                <p className="text-danger fw-bold">Campo Obrigatório!</p>
                            )}
                        </div>

                        <div className="w-100 me-2">
                            <label className="p-1">Horario partida</label>
                            <input type="time"
                                   className="form-control"
                                   {...register("hora_partida", {required: true})}
                            />
                            {errors?.hora_partida?.type === "required" && (
                                <p className="text-danger fw-bold">Campo Obrigatório!</p>
                            )}
                        </div>

                        <div className="w-100 me-2">
                            <label className="p-1">Duração Voo</label>
                            <input type="time"
                                   className="form-control"
                                   {...register("duracao", {required: true})}
                            />
                            {errors?.duracao?.type === "required" && (
                                <p className="text-danger fw-bold">Campo Obrigatório!</p>
                            )}
                        </div>

                    </div>

                    <div className="d-sm-flex justify-content-between mt-4 mb-4">

                        <div className="w-100 me-2">
                            <label className="p-1">Total assentos:</label>
                            <input type="number"
                                   className="form-control"
                                   placeholder="Total se assentos"
                                   {...register("total_assentos", {required: true})}
                            />
                            {errors?.total_assentos?.type === "required" && (
                                <p className="text-danger fw-bold">Campo Obrigatório!</p>
                            )}
                        </div>

                        <div className="w-100 me-2">
                            <label className="p-1">Preço:</label>
                            <input type="text"
                                   className="form-control"
                                   placeholder="Valor da passagem"
                                   {...register("preco", {required: true})}
                            />
                            {errors?.preco?.type === "required" && (
                                <p className="text-danger fw-bold">Campo Obrigatório!</p>
                            )}
                        </div>

                        <div className="w-100 me-2">
                            <label className="p-1">Desconto:</label>
                            <input type="text"
                                   className="form-control"
                                   placeholder="Desconto"
                                   {...register("desconto", {required: true})}
                            />
                            {errors?.desconto?.type === "required" && (
                                <p className="text-danger fw-bold">Campo Obrigatório!</p>
                            )}
                        </div>
                    </div>

                    <div>
                        <button className="btn btn-success  pe-5 ps-5"
                                onClick={(e) => {
                                    e.preventDefault();
                                    handleSubmit(onSubmit)()
                                }}
                        >Salvar
                        </button>
                    </div>


                    {status === true ? (
                        <ModalComponent isOpen={openModal}>
                            <p>Voo salvo com sucesso</p>
                            <div className="d-flex justify-content-end">
                                <button className="btn btn-success" onClick={closeModal}>OK</button>
                            </div>

                        </ModalComponent>
                    ) : (
                        ""
                    )}

                    {error === true?(
                        <p className="text-danger fw-bold mt-4">Erro ao salvar, verifique os dados e tente novamente!</p>
                    ):("")}
                </form>


            </main>
        </>
    );
}

export default Cadastro;
