import Head from "next/head";
import { Inter } from "next/font/google";
import { useForm } from "react-hook-form";
import axios from "axios";
import { useRouter } from "next/router";
import { useAuth } from "@/context/authContext";
import {useEffect, useState} from "react";
import {http} from "@/utils/http";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {

  const [error, setError] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();

  const { token, login, user } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (token != null && user.role ==="ADMIN"){
      router.push("/backoffice/dashboard");
    }
  }, [router, token]);

  const onSubmit = async (data) => {
    try {
      const response = await http.post(
        "http://localhost:8080/auth/login",
        data
      );

      if (response.data != null) {
        login(response.data);
        router.push("/backoffice/dashboard")

      }
    } catch (error) {
      if (axios.isAxiosError(error) && error.response) {
        setError(true)
        console.error("Erro na resposta da API:", error.response.data);
      } else {
        console.error("Erro ao enviar dados para a API:", error);
      }
    }
  };

  return (
    <>
      <Head>
        <title>Agencia de Viagems - Login </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="container d-flex align-items-center justify-content-center mt-5 min-heigth">
          <div className="w-50">

            <h1 className="mb-5 text-center">Login Administrador</h1>
            <input
              type="text"
              className="form-control  mb-4  border-primary"
              id="login"
              placeholder="Login"
              {...register("login", { required: true })}
            />
            {errors?.login?.type === "required" && (
              <p className=" text-danger fw-bold">Login Obrigatório!</p>
            )}

            <input
              type="password"
              className="form-control mb-4 border-primary"
              id="senha"
              placeholder="Senha"
              {...register("senha", { required: true })}
            />

            {errors?.senha?.type === "required" && (
              <p className=" text-danger fw-bold">Senha Obrigatório!</p>
            )}

            {error === true ? (
                <p className="fw-bold text-danger">Senha ou usuario invalidos</p>
            ): ("")}

            <button
              className="btn btn-primary w-100 mb-3"
              onClick={() => handleSubmit(onSubmit)()}
            >
              Entrar
            </button>
          </div>
        </div>
      </main>
    </>
  );
}
